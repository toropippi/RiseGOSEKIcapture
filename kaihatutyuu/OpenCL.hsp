#define SKILLSY 24
goto*____________last4

*clfirstInit
	HCLinit
	HCLSetDevice 1
	
	prg=HCLCreateProgram("templatem.cl")//OpenCLのコードが書かれたファイル。コンパイルもここで

	//カーネル
	krn_Col_to_Gray_load=HCLCreateKernel(prg,"Col_to_Gray_load")//スキルロードに使う
	krn_Col_to_Gray_skl=HCLCreateKernel(prg,"Col_to_Gray_skl")//毎フレーム変換するほう
	krn_Col_to_Gray=HCLCreateKernel(prg,"Col_to_Gray")//スロットロードに使う
	krn_Col_to_Gray_slot=HCLCreateKernel(prg,"Col_to_Gray_slot")//毎フレーム変換するほう
	krn_Mypos=HCLCreateKernel(prg,"Mypos")//最初の1回求めるやつ
	krn_Match2=HCLCreateKernel(prg,"Match2")
	krn_GetMin=HCLCreateKernel(prg,"GetMin")

	//メモリ
	//スキル画像の横幅
	GRPHCSSX=68,188,116,116,140,140,188,140,116,140,92,68,92,92,164,68,164,140,92,92,92,192,92,68,68,44,92,44,68,44,68,116,44,92,92,188,92,44,92,44,20,92,68,44,164,68,140,92,116,68,92,92,92,164,44,164,44,92,92,68,68,68,192,92,116,164,140,116,68,92,68,68,140,164,140,140,140,92,92,164,68,44,92,116,92,92,44,92,44,140,92,68,44,164,68,164,68,92,44,92,68
	mem_GRPHCSSX=HCLCreateBufferFrom(GRPHCSSX)
	mem_myposcol=HCLCreateBuffer((10020*24+32)*4)//x座標、y座標、skill_noから色をとってくる
	mem_mypos=HCLCreateBuffer((10020*24+32)*4)//x座標、y座標、skill_no
	//スコア倍数
	STRLENALL = 3,7,5,5,6,6,7,6,5,6,4,3,3,4,7,3,7,6,4,4,4,7,4,3,3,2,4,2,3,2,3,5,2,4,4,7,4,2,4,2,1,4,3,2,7,3,6,4,5,3,4,4,4,7,2,7,2,4,4,3,3,3,7,4,5,7,6,5,3,4,3,3,6,7,6,6,6,4,4,7,3,2,4,5,4,4,2,4,2,6,4,3,2,7,3,7,3,4,2,4,3
	mem_STRLENALL = HCLCreateBufferFrom(STRLENALL)
	
	pxsize=24*192*SKLNUM
	mem_skl_col=HCLCreateBuffer(24*192*3)//スキルロード用
	mem_col4=HCLCreateBuffer((szlist.0+4)*(szlist.1+4)*3)
	mem_col5=HCLCreateBuffer((szlist.2+4)*(szlist.3+4)*3)
	mem_col8=HCLCreateBuffer((szlist.8+4)*(szlist.9+4)*3)
	dim_i64 mem_colslot,4
		repeat 4//スロットカラー
		mem_colslot.cnt=HCLCreateBuffer(36*28*3)
		loop
		
	mem_buffer=HCLCreateBuffer(pxsize*4)//スキルロード→buffer
	mem_gry45=HCLCreateBuffer((szlist.0+4)*(szlist.1+4)*4)//4と5をあわせたやつ
	mem_gry8=HCLCreateBuffer((szlist.8+4)*(szlist.9+4)*4)
	dim_i64 mem_gryslot,4
		repeat 4//スロット白黒
		mem_gryslot.cnt=HCLCreateBuffer(36*28*4)
		loop
	
	whitescore=HCLCreateBuffer(2*4)
	blackscore=HCLCreateBuffer(2*4)
	//結果出力用。101枚ごとに24*12アレイのスカラーがある
	Sum1Result=HCLCreateBuffer(101*24*12*2*4)//
	Sum2Result=HCLCreateBuffer(101*2*4)//24*12の中の最小値をいれる。

	

	//カーネルセット
	HCLSetKrns krn_Match2,mem_GRPHCSSX,mem_buffer,mem_gry45,Sum1Result,mem_STRLENALL
	HCLSetKrns krn_GetMin,Sum1Result,Sum2Result
	return
	
	/*
	//      スキル1,スキル2 ,Lv1     ,Lv2     ,スロ画像,紙の護石,スロット,装備スキル
	xylist=34  ,180,34  ,256,271 ,214,271 ,290,229 ,78 ,63  ,6  ,6   ,86 ,121 ,142
	szlist=220 ,32 ,220 ,32 ,96  ,36 ,96  ,36 ,132 ,44 ,140 ,36 ,128 ,32 ,132 ,30
*/

*clfirstInit2
	HCLSetKrns krn_Mypos,mem_myposcol,mem_mypos,mem_GRPHCSSX,mem_buffer
	HCLDoKrn1 krn_Mypos,(10020*24+32),64
	//これで、101枚マッチングの際に、global_idから自分の色がO(1)でわかる
	return

//スキルロード
*Set100TpBuf
	mref mrefv,66
	HCLWriteBuffer mem_skl_col,mrefv,24*192*3,0,0,1
	HCLSetKernel krn_Col_to_Gray_load,0,mem_skl_col
	HCLSetKernel krn_Col_to_Gray_load,1,ccnt
	HCLSetKernel krn_Col_to_Gray_load,2,mem_buffer
	HCLDoKrn1 krn_Col_to_Gray_load,192*24,64
	return

//スキル部分の転送
*SetCapBuf01
	HCLWriteBuffer mem_col4,mrefv4,,,,0
	HCLWriteBuffer mem_col5,mrefv5,,,,0
	HCLFillBuffer4 blackscore,0,0,8
	HCLFillBuffer4 whitescore,0,0,8
	
	HCLSetKrns krn_Col_to_Gray_skl,mem_col4,mem_gry45,blackscore,whitescore,0
	HCLDoKrn1 krn_Col_to_Gray_skl,224*36,0
	
	HCLSetKrns krn_Col_to_Gray_skl,mem_col5,mem_gry45,blackscore,whitescore,1
	HCLDoKrn1 krn_Col_to_Gray_skl,224*36,0
	return


//スロット4枚ロード
*SetUserTpBuf
	mref mrefv,66
	HCLWriteBuffer mem_colslot.cnt,mrefv,,,,1
	HCLSetKrns krn_Col_to_Gray,mem_colslot.cnt,mem_gryslot.cnt
	HCLDoKrn1 krn_Col_to_Gray,36*28,0
	return
	
//スロットの画像転送
*SetCapBuf4
	HCLWriteBuffer mem_col8,mrefv8,,,,0
	HCLSetKrns krn_Col_to_Gray_slot,mem_col8,mem_gry8
	HCLDoKrn1 krn_Col_to_Gray_slot,136*48,0
	return

*Match100
	HCLDoKrn1 krn_Match2,24*12*101,32,0
	HCLDoKrn1 krn_GetMin,101*2*32,32
	return

*____________last4