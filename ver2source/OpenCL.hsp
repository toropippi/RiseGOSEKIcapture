#define SKILLSY 24
goto*____________last4

*clfirstInit
	HCLinit
	
	sdim GOSEKIcapture2Setting,4096
	notesel GOSEKIcapture2Setting
	noteload "GOSEKIcapture2Setting.txt"
	noteget p1,1
	HCLSetDevice int(p1)
	prg=HCLCreateProgram("templatem.cl")//OpenCLのコードが書かれたファイル。コンパイルもここで

	//カーネル
	krn_SklLoad=HCLCreateKernel(prg,"SklLoad")//スキルロードに使う
	krn_SlotLoad=HCLCreateKernel(prg,"SlotLoad")//スロットロードに使う
	krn_SklFrame=HCLCreateKernel(prg,"SklFrame")//毎フレーム変換するほう
	krn_SlotFrame=HCLCreateKernel(prg,"SlotFrame")//毎フレーム変換するほう
	krn_Match2=HCLCreateKernel(prg,"Match2")
	krn_Match2max=HCLCreateKernel(prg,"Match2max")
	krn_GetMin=HCLCreateKernel(prg,"GetMin")
	krn_MatchSlot=HCLCreateKernel(prg,"MatchSlot")
	krn_SlotSum=HCLCreateKernel(prg,"SlotSum")

	//メモリ
	//スキル画像の横幅
	mem_GRPHCSSX=HCLCreateBufferFrom(GRPHCSSX)
	mem_GRPHCSSX_sm=HCLCreateBufferFrom(GRPHCSSX_sm)//累積和
	mem_GRPHCSSX4=HCLCreateBufferFrom(GRPHCSSX4)//4で割ったやつ
	
	//スコア倍数
	mem_STRLENALL = HCLCreateBufferFrom(STRLENALL)

	//メモリカラー
	pxsize=24*192*SKLNUM
	mem_skl_col=HCLCreateBuffer(pxsize*3)//スキルロード用
	mem_slot_col=HCLCreateBuffer(36*28*4*3)//スロットロード用
	mem_col45=HCLCreateBuffer((szlist.0+4)*(szlist.1+4)*3*2)//スキル毎フレーム*2枚
	mem_col8=HCLCreateBuffer((szlist.8+4)*(szlist.9+4)*3)
	//メモリグレー
	//mem_buffer=HCLCreateBuffer(pxsize)//スキルロード→buffer.uchar型で格納
	mem_buffer=HCLCreateBuffer(24*GRPHCSSX_sm.SKLNUM)//スキルロード→buffer.uchar型で格納
	mem_dslot_gry=HCLCreateBuffer(36*28*4)//スロットロード
	mem_gry45=HCLCreateBuffer((szlist.0+4)*(szlist.1+4)*2)//4と5をあわせたやつuchar型で格納
	mem_gry8=HCLCreateBuffer((szlist.8+4)*(szlist.9+4)*4)
	
	blackwhitescore=HCLCreateBuffer(2*2*4)//先頭black[2]、後半white[2]
	//結果出力用。101枚ごとに24*12アレイのスカラーがある
	Sum1Result=HCLCreateBuffer(101*24*12*2*4)//
	Sum2Result=HCLCreateBuffer(101*2*4)//24*12の中の最小値をいれる。
	//結果出力用。スロットの法
	Sum3Result=HCLCreateBuffer(16*20*4*3*4)//16*20スライドで4枚4箇所*uint型
	Sum4Result=HCLCreateBuffer(4*3*4)//4枚4箇所*uint型
	
	//カーネルセット
	HCLSetKrns krn_SklFrame,mem_col45,mem_gry45,blackwhitescore
	HCLSetKrns krn_SlotFrame,mem_col8,mem_gry8
	HCLSetKrns krn_Match2,mem_GRPHCSSX4,mem_buffer,mem_gry45,Sum1Result,mem_STRLENALL,mem_GRPHCSSX_sm
	HCLSetKrns krn_Match2max,mem_GRPHCSSX4,mem_buffer,mem_gry45,Sum1Result,mem_STRLENALL,mem_GRPHCSSX_sm
	HCLSetKrns krn_GetMin,Sum1Result,Sum2Result
	HCLSetKrns krn_MatchSlot,mem_dslot_gry,mem_gry8,Sum3Result
	HCLSetKrns krn_SlotSum,Sum3Result,Sum4Result
	return
	
	/*
	//      スキル1,スキル2 ,Lv1     ,Lv2     ,スロ画像,紙の護石,スロット,装備スキル
	xylist=34  ,180,34  ,256,271 ,214,271 ,290,229 ,78 ,63  ,6  ,6   ,86 ,121 ,142
	szlist=220 ,32 ,220 ,32 ,96  ,36 ,96  ,36 ,132 ,44 ,140 ,36 ,128 ,32 ,132 ,30
*/


///////////ロード系
//スキルロード
*SklLoad
	mref mrefv,66
	HCLWriteBuffer mem_skl_col,mrefv,24*192*3,0,0,1
	HCLSetKernel krn_SklLoad,0,mem_skl_col
	HCLSetKernel krn_SklLoad,1,GRPHCSSX_sm.ccnt*24
	HCLSetKernel krn_SklLoad,2,mem_buffer
	HCLSetKernel krn_SklLoad,3,GRPHCSSX.ccnt
	HCLDoKrn1 krn_SklLoad,GRPHCSSX.ccnt*24,32,0
	return

//スロット4枚ロード
*SlotLoad
	mref mrefv,66
	HCLWriteBuffer mem_slot_col,mrefv,,,,1
	HCLSetKrns krn_SlotLoad,mem_slot_col,mem_dslot_gry
	HCLDoKrn1 krn_SlotLoad,36*28,16,1
	return
///////////ロード系ここまで
	

//スキル部分の転送
*SklFrame
	HCLWriteBuffer mem_col45,mrefv45,,,,0
	HCLFillBuffer_i32 blackwhitescore,0,0,16
	HCLDoKrn1 krn_SklFrame,224*36*2,64
	return

//スロットの画像転送
*SlotFrame
	HCLWriteBuffer mem_col8,mrefv8,,,,0
	HCLDoKrn1 krn_SlotFrame,136*48,0
	return

*Match100
	if slidersc<1999999999{
		HCLSetKernel krn_Match2,6,slidersc
		HCLDoKrn1 krn_Match2,24*12*101,32,0
	}else{
		HCLDoKrn1 krn_Match2max,24*12*101,32,0
	}
	HCLDoKrn1 krn_GetMin,101*2*32,32
	return
	
*MatchSlot44
	HCLDoKrn1 krn_MatchSlot,16*20*3,32,1
	HCLDoKrn1 krn_SlotSum,32*4*3,32
	return



*____________last4